_vcsSync_git()
@msg = _osGet('msg')
'
pushd ' $vcsWorkingDir '

' _osRem('Fetch latest info into .git, without changing current HEAD or workingDir') '
git remote update || ' _osPause() '

' _osRem('Display and collect the current version in all our various places') '
git status -uno || ' _osPause() newline


if sep = '\' then /* .bat */
'
set DBVER=
for /f "tokens=*" %%i in (''git log --all -F "--grep=' @msg '" -1 "--format=%%H"'') do set DBVER=%%i || ' _osPause() '
IF not defined DBVER (
	echo Current DB version not found: solve manually
	exit /B 1
)

for /f "tokens=*" %%i in (''git rev-parse @'') do set LOCALVER=%%i || ' _osPause() '
for /f "tokens=*" %%i in (''git rev-parse @{u}'') do set REMOTEVER=%%i || ' _osPause() '
for /f "tokens=*" %%i in (''git merge-base @ @{u}'') do set BASEVER=%%i || ' _osPause() '
for /f "tokens=*" %%i in (''git merge-base %DBVER% @{u}'') do set DBBASEVER=%%i || ' _osPause() '

' _osRem('Compare local VCS with remote VCS, pull/push if necessary') '
if "%LOCALVER%"=="%REMOTEVER%" (
	echo Local .git up to date
) else (
	if "%LOCALVER%"=="%BASEVER%" (
		echo Need to pull
		git stash save --all || ' _osPause() '
		git fetch origin || ' _osPause() '
		git reset --hard origin/master || ' _osPause() '
	) else (
		if "%REMOTEVER%"=="%BASEVER%" (
			echo Need to push
			git push -u --force-with-lease origin master || ' _osPause() '
			exit /B
		) else (
			echo Diverged: solve manually
			exit /B 2
)	)	)
'
	if $vcsRebase then 
'
echo Multi-user version, no need to update DB
'
	else
		/* only replace DB in single user version */
'
rem Now compare local DB with remote VCS
if "%DBVER%"=="%REMOTEVER%" (
	if "%vcsDirty%"=="" (
		echo DB version matches remote git, no unversioned model changes in DB
	) else (
		echo DB version matches remote git, but DB has unversioned changes
	)
) else (
	if "%DBVER%"=="%DBBASEVER%" (
		if "%vcsDirty%"=="" (
			echo DB version is older than remote git, no unversioned model changes in DB: copy from git
		) else (
			' _osPause(newline 'DANGER: DB version is older than remote git, but DB has unversioned changes.' newline '  Press Enter to discard those changes and continue, or' newline '  press Ctrl+C and answer yes to abort') '
		)
		popd
		if exist "' $dbDir '" ' _osPause(newline 'DANGER: ' $dbDir ' already exists, about to replace - ' newline '  exit MetaEdit+ and press Enter to continue, or' newline '  press Ctrl+C and answer yes to abort') '
		' _osRmdir($dbDir) '
		pushd ' $vcsWorkingDir newline
		do _vcsRestoreDB($dbDir) { '		' id newline } '
	) else (
		echo DB version is in remote git, but remote HEAD is an older version: solve manually
		exit /B 3
	)
)
'
	endif /* single user version */
else /* Bash */
'
unset DBVER
export DBVER=`git log --all -F --grep=''' $msg ''' -1 --format=%H` || ' _osPause() '
if [ "$DBVER" == "" ]; then
	echo Current DB version not found: solve manually
	exit 1
fi

export  LOCALVER=`git rev-parse @`            || ' _osPause() '
export REMOTEVER=`git rev-parse @{u}`         || ' _osPause() '
export   BASEVER=`git merge-base @ @{u}`      || ' _osPause() '
export DBBASEVER=`git merge-base $DBVER @{u}` || ' _osPause() '

# Compare local VCS with remote VCS, pull/push if necessary
if [ "$LOCALVER" == "$REMOTEVER" ]; then
	echo Local .git up to date
else
	if [ "$LOCALVER" == "$BASEVER" ]; then
		echo Need to pull
		git stash save --all || ' _osPause() '
		git fetch origin || ' _osPause() '
		git reset --hard origin/master || ' _osPause() '
	else
		if [ "$REMOTEVER" == "$BASEVER" ]; then
			echo Need to push
			git push -u --force-with-lease origin master || '; _osPause() '
			exit
		else
			echo Diverged: solve manually
			exit 2
		fi
	fi
fi
'
	if $vcsRebase then 
'
echo Multi-user version, no need to update DB
'
	else
		/* only replace DB in single user version */
'
# Now compare local DB with remote VCS
if [ "$DBVER" == "$REMOTEVER" ]; then
	if [ "$vcsDirty" == "" ]; then
		echo DB version matches remote git, no unversioned model changes in DB
	else
		echo DB version matches remote git, but DB has unversioned changes
	fi
else
	if [ "$DBVER" == "$DBBASEVER" ]; then
		if [ "$vcsDirty" == "" ]; then
			echo DB version is older than remote git, no unversioned model changes in DB: copy from git
		else
			' _osPause(newline 'DANGER: DB version is older than remote git, but DB has unversioned changes.' newline '  Press Enter to discard those changes and continue, or' newline '  press Ctrl+C and answer yes to abort') '
		fi
		popd
		if [ -d "' $dbDir '" ]; then ' _osPause(newline 'DANGER: ' $dbDir ' already exists, about to replace - ' newline '  exit MetaEdit+ and press Enter to continue, or' newline '  press Ctrl+C and answer yes to abort') '; fi
		' _osRmdir($dbDir) '
		pushd ' $vcsWorkingDir newline
		do _vcsRestoreDB($dbDir) { '		' id newline } '
	else
		echo DB version is in remote git, but remote HEAD is an older version: solve manually
		exit 3
	fi
fi
'
	endif /* single user version */
endif /* Bash */
